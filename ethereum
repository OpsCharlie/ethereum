#!/bin/bash
#===============================================================================
#
#          FILE: ethereum
#
#         USAGE: ./ethereum [sell|buy|update|info|test]
#
#   DESCRIPTION: If ther are holdings, notify if diffecence between previous check is -2%
#                                             or
#                If ther are no holdings, notify if diffecence between previous check is +2%
#                                                or
#                                                if the difference is +10% of TransactionPrice
#
#  REQUIREMENTS: https://github.com/pixelb/scripts/blob/master/scripts/ansi2html.sh
#
#       OPTIONS: buy = I bought holdings
#                sell = I sold holdings
#                update = update oldprice
#                test = send testmail
#                info = show info
#
#        AUTHOR: OpsCharlie
#  ORGANIZATION:
#       CREATED: 09-03-20 12:09:11
#      REVISION:  ---
#===============================================================================


Usage() {
    cat <<EOF
    Usage: $0 [sell|buy|update|info|test|price|balance]
        buy      = Buy Asset
        sell     = Sell Asset
        update   = Bot will buy/sell
        test     = Send test email
        info     = Show info
        price    = Show price of Asset
        balance  = Show balance
EOF
}


GetMACD() {
    JqResult=$(curl -s "https://api.taapi.io/macd?secret=${TaapiKey}&exchange=${Exchange}&symbol=${Asset}/${Quote}&interval=${Interval}" | jq .valueMACDHist)
    if [[ $JqResult == null ]]; then
        exit 1
    fi
    echo "$JqResult"
    # echo $x
}


GetPrice() {
    curl -s "${BinanceUrl}/ticker/price?symbol=${Symbol}" | jq .price
}


GetSignature() {
    echo -n "$1" | openssl dgst -sha256 -hmac "${BinanceSecret}" | awk '{print $2}'
}


GetBalance() {
    Time=$(date +%s%3N)
    Request="timestamp=${Time}"
    Signature="$(GetSignature ${Request})"
    curl -s --location --request GET "${BinanceUrl}/account?${Request}&signature=${Signature}" \
        --header "Content-Type: application/json" \
        --header "X-MBX-APIKEY: ${BinanceKey}"
}


BuyBinance() {
    QuoteQuantity=$(GetBalance| jq --arg QUOTE "${Quote}" '.balances[] | select (.asset==$QUOTE).free' | tr -d '"')
    Time=$(date +%s%3N)
    Request="symbol=${Symbol}&side=BUY&type=MARKET&quoteOrderQty=${QuoteQuantity}&timestamp=${Time}"
    Signature="$(GetSignature ${Request})"
    if [[ $Test -eq 0 ]]; then
        curl -s --location --request POST "${BinanceUrl}/order?${Request}&signature=${Signature}" \
            --header "Content-Type: application/json" \
            --header "X-MBX-APIKEY: ${BinanceKey}"
        Replace LastTransaction "$(date) - BUY - $Price"
    else
        # echo "Dry Run!!!"
        # echo
        # echo "$Request" | tr '&' '\n'
        curl -s --location --request POST "${BinanceUrl}/order/test?${Request}&signature=${Signature}" \
            --header "Content-Type: application/json" \
            --header "X-MBX-APIKEY: ${BinanceKey}"
    fi
}


SellBinance() {
    AssetQuantity=$(GetBalance| jq --arg QUOTE "${Asset}" '.balances[] | select (.asset==$QUOTE).free' | tr -d '"')
    AssetQuantity=$(echo "scale=4; $AssetQuantity / 1" | bc)
    Time=$(date +%s%3N)
    Request="symbol=${Symbol}&side=SELL&type=MARKET&quantity=${AssetQuantity}&timestamp=${Time}"
    Signature="$(GetSignature ${Request})"
    if [[ $Test -eq 0 ]]; then
        curl -s --location --request POST "${BinanceUrl}/order?${Request}&signature=${Signature}" \
            --header "Content-Type: application/json" \
            --header "X-MBX-APIKEY: ${BinanceKey}"
        Replace LastTransaction "$(date) - SELL - $Price"
    else
        # echo "Dry Run!!!"
        # echo
        # echo "$Request" | tr '&' '\n'
        curl -s --location --request POST "${BinanceUrl}/order/test?${Request}&signature=${Signature}" \
            --header "Content-Type: application/json" \
            --header "X-MBX-APIKEY: ${BinanceKey}"
    fi
}



Info() {
    echo
    curl -s "usdt.rate.sx" | grep -E 'ETH|Rank' | grep -v "NEW FEATURE"
    echo
    echo "Price = $(GetPrice)"
    echo "MACD = $(GetMACD)"
    echo
    Balance=$(GetBalance)
    echo "$Balance" | jq --arg ASSET "${Asset}" --arg QUOTE "${Quote}" '.balances[] | select (.asset==$ASSET or .asset==$QUOTE)'
    echo
    curl -s "usdt.rate.sx/eth@1h"
}


SendMail() {
    Subject=${1:-nomessage}
    if [[ $Test -eq 1 ]]; then
        Subject+=" TEST"
    fi
    ExtraInfo=${2:-...}
    (
        echo '<body style="background-color:#000000;">'
        echo '<pre style="font: monospace; color: white">'
        {
            echo "$Extrainfo"
            Info
        } | /usr/local/bin/ansi2html.sh
        echo '</pre>'
        echo '</body>'
    ) | sendemail -f "$Email_From" -t "$Email_To" -s "$Email_Server" -u "$Subject" -o message-content-type=html -o message-charset=utf-8
    if [[ ! -z $SMS_Phone ]]; then
        wget https://panel.smspoint.ee/gateway/$SMS_API/api.v1/send?phone=$SMS_Phone\&sender=ETHEREUM\&when=\&message=$(echo $Subject | tr ' ' '+')\&output=json -O /tmp/wget.log
    fi
}


Init() {
    if [ -f ~/.ethereum.conf ]; then
        Conf=~/.ethereum.conf
        source $Conf
        source $PreviousValues
    else
        echo "$HOME/.ethereum.conf not found"
        exit 1
    fi
    Time=$(date +%s%3N)
    Symbol="$Asset$Quote"
}


GetDirection() {
    Diff=$(echo "$MACD - $PreviousMACD" | bc)
    if [[ $(echo "$Diff > 0" | bc) -eq 1 ]]; then
        echo "Ascending"
    elif [[ $(echo "$Diff < 0" | bc) -eq 1 ]]; then
        echo "Descending"
    elif [[ $(echo "$Diff == 0" | bc) -eq 1 ]]; then
        echo "Stable"
    fi
}


Replace() {
    sed -i "s/^$1.*/$1=$2/" $PreviousValues
}


GetBuySell() {
    if [ -z $PreviousSide ]; then
        PreviousSide="hold"
    fi
    if [[ $Direction == "Ascending" ]]; then
        if [[ $(echo "$MACD >= $Buy" | bc) -eq 1 ]]; then
            if [[ $PreviousSide != "buy" ]]; then
                Side="buy"
                Replace PreviousSide "$Side"
                echo $Side
            fi
        fi
    elif [[ $Direction == "Descending" ]]; then
        if [[ $(echo "$MACD <= $Sell" | bc) -eq 1 ]]; then
            if [[ $PreviousSide != "sell" ]]; then
                Side="sell"
                Replace PreviousSide "$Side"
                echo $Side
            fi
        fi
    fi
}


Main() {
    Init
    MACD=$(GetMACD)
    if [[ $? -ne 0 ]]; then
        SendMail "Crypto-signal MACD alert!" "Error fetching MACD"
        exit 1
    fi
    Replace PreviousDate "$(date)"
    if [ -z $PreviousMACD ]; then
        PreviousMACD=$MACD
    fi
    Replace PreviousMACD "$MACD"
    Price="$(GetPrice)"
    if [ -z $PreviousPrice ]; then
        PreviousPrice=$Price
    fi
    Replace PreviousPrice "$Price"
    Direction=$(GetDirection)
    if [ -z $PreviousDirection ]; then
        PreviousDirection=$Direction
    fi
    Replace PreviousDirection "$Direction"
    BuySell=$(GetBuySell)
    if [[ $Test -eq 1 ]]; then
        echo "TEST"
        cat $PreviousValues
        echo
        echo "BuySell = $BuySell"
    fi
    if [[ $BuySell == "buy" ]]; then
        echo "Buying $Price"
        Result=$(BuyBinance)
        SendMail "Crypto-signal buy alert!" "$Result"
    elif [[ $BuySell == "sell" ]]; then
        echo "Selling $Price"
        Result=$(SellBinance)
        SendMail "Crypto-signal sell alert!" "$Result"
    fi
}


case "$1" in
  buy)        Init; BuyBinance;;
  sell)       Init; SellBinance;;
  update)     Main;;
  test )      Init; SendMail "Crypto-signal test alert!";;
  info)       Init; Info;;
  price)      Init; GetPrice;;
  balance)    Init;
              Balance=$(GetBalance)
              echo "$Balance" | jq --arg ASSET "${Asset}" --arg QUOTE "${Quote}" '.balances[] | select (.asset==$ASSET or .asset==$QUOTE)'
              ;;
  *)          Usage;;
esac

